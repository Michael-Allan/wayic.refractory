Wayic index


    `!!`
        : see `^^ Alarm point$` @ http://reluk.ca/project/Breccia/language_definition.brec
    `$$`
        : see `^^ Pattern matching$` @ http://reluk.ca/project/Breccia/language_definition.brec
    `+`
        : see `^^ Task point$` @ http://reluk.ca/project/Breccia/language_definition.brec
    `/`
        : see `^^ Aside point$` @ http://reluk.ca/project/Breccia/language_definition.brec
    `:`
        : see `^^ Command point$` @ http://reluk.ca/project/Breccia/language_definition.brec
    `>`
        : see @ http://reluk.ca/project/editing/lexicon.brec
    `@`
        : see `^^ancestor qualification$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see `^^document qualification$` @ http://reluk.ca/project/Breccia/language_definition.brec
    `\`
        : see `^^ Comment carrier$` @ http://reluk.ca/project/Breccia/language_definition.brec
    `^^`
        : see `^^ Pattern matching$` @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ A ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    aimed way of life
        : see @ http://reluk.ca/project/waycast/wayics/lexicon.brec
    alarm point
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    also, command `see also`
        : join `^^see also$`
    ancestor, of a body fractum
        : see @ `^^ hierarchical relata$` @ http://reluk.ca/project/Breccia/language_definition.brec
    append
        : see same term @ `descriptor .+ form:$` @ `^^appendage patch$`
          @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    appendage patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    architectonic
        , of the wayic
            : join `^^, architectonic of$` @ `^^wayic$`
        , term
            : see `^^architectonic$` @ http://reluk.ca/project/waycast/wayics/lexicon.brec
    architecture
        , of the wayic
            : join `^^, architecture of$` @ `^^wayic$`
        , term
            : see `^^architecture$` @ http://reluk.ca/project/waycast/wayics/lexicon.brec
    aside point
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    associative reference
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    authority, certificate of
        : join `^^certificate of authority$`
    autoprivatizer
        : see  @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ B ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    blind, term ‘indentation blind’
        : join `^^indentation blind$`
    body
        : see @ `^^ Fractum$` @ http://reluk.ca/project/Breccia/language_definition.brec
    body fractum
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
    .brec
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    Breccia
        , language
            : see http://reluk.ca/project/Breccia/
        , term
            : see `^^Breccia$` @ http://reluk.ca/project/Breccia/lexicon.brec
        , Web imager
            : join `^^, Breccia` @ `^^Web imager$`
    Breccia Mode for Emacs
        : see http://reluk.ca/project/Breccia/Emacs/
    Breccian
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    bullet
        : see @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ C ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    carrier, term ‘comment carrier’
        : join `^^comment carrier$`
    cast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec
    certificate of authority
        : see @ http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
    cf.
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec
    child, of a fractum
        : see @ `^^ hierarchical relata$` @ http://reluk.ca/project/Breccia/language_definition.brec
    child insertion patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    code, Wayic Code
        : join `^^Wayic Code$`
    command directory
        : see @ http://reluk.ca/project/lexicon.brec
    command point
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    comment carrier
        : see @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ D ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    declaration, term ‘way declaration’
        : join `^^way declaration$`
    delete
        : see same term @ `descriptor .+ form:$` @ `^^deletion patch$`
          @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    deletion patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    descendant, of a fractum
        : see @ `^^ hierarchical relata$` @ http://reluk.ca/project/Breccia/language_definition.brec
    descriptor
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    directory, term ‘command directory’
        : join `^^command directory$`
    divider
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    division
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    document fractum
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ E ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    e.g.
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec
    Emacs
        , Breccia Mode for Emacs
            : join `^^Breccia Mode for Emacs$`
        , Waybrec Mode for Emacs
            : join `^^Waybrec Mode for Emacs$`
    engagement
        , term ‘way engagement’
            : join `^^way engagement$`
        , term ‘way engagement point’
            : join `^^way engagement point$`
    execute
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    extracast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec


╺━━ F ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    F
        , form of
            : join `^^form F$`
        , right to
            : join `^^right to F$`
    formal
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    form F
        , proto-cast of
            : see http://reluk.ca/project/proto-waycast/moral_forms.xht#F
        , term
            : see `^^form F$` @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    form G
        , proto-cast of
            : see http://reluk.ca/project/proto-waycast/moral_forms.xht#G
        , term
            : see `^^form G$` @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    fracta
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    fractal
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    fractum
        , formal unit
            : see @ http://reluk.ca/project/Breccia/language_definition.brec
        , term ‘body fractum’
            : join `^^body fractum$`
        , term ‘document fractum’
            : join `^^document fractum$`
        , term ‘fractum’
            : see @ http://reluk.ca/project/Breccia/lexicon.brec


╺━━ G ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    G
        , form of
            : join `^^form G$`
        , right to
            : join `^^right to G$`
    generic point
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ H ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    head
        : see @ `^^ Fractum$` @ http://reluk.ca/project/Breccia/language_definition.brec
    hierarchical order
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    hierarchy
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    human rights
        : see @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    hyperlink referrer
        : see @ http://reluk.ca/project/Web/lexicon.brec


╺━━ I ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    identifier, term ‘waycaster identifier’
        : join `^^waycaster identifier$`
    i.e.
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec
    image, term ‘Web image’
        : join `^^Web image$`
    image production set
        : see http://reluk.ca/project/Breccia/Web/imager/lexicon.brec
    indentation, term ‘perfect indentation’
        : join `^^perfect indentation$`
    indentation blind
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    informal
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    insertion patch
        , for a child
            : join `^^child insertion patch$`
        , for a sibling
            : join `^^sibling insertion patch$`
    intracast
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec


╺━━ J ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    join
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec
    jointer
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec


╺━━ K ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    kit, recast kit
        : join `^^recast kit$`


╺━━ L ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    linear order
        : see @ http://reluk.ca/project/Breccia/lexicon.brec


╺━━ M ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    Makeshift
        : see http://reluk.ca/project/building/Makeshift/
    mode
        , Breccia Mode for Emacs
            : join `^^Breccia Mode for Emacs$`
        , Waybrec Mode for Emacs
            : join `^^Waybrec Mode for Emacs$`
    model, term ‘way model’
        : join `^^way model$`


╺━━ N ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    NB
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec
    N.B.
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec
    nominate
        : see @ http://reluk.ca/project/waycast/wayics/lexicon.brec


╺━━ O ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    off-way
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    on-way
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    order
        , hierarchical ‘linear order’
            : join `^^hierarchical order$`
        , term ‘linear order’
            : join `^^linear order$`


╺━━ P ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    package, term ‘proper package’
        : join `^^proper package$`
    parent, of a body fractum
        : see @ `^^ hierarchical relata$` @ http://reluk.ca/project/Breccia/language_definition.brec
    parental privatizer
        : see  @ http://reluk.ca/project/Breccia/language_definition.brec
    patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    path, term ‘proper path’
        : join `^^proper path$`
    pattern matching
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    perfect indentation
        : see @ `^^ Whitespace$` @ http://reluk.ca/project/Breccia/language_definition.brec
    point
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    pointer
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    precede
        : see same term @ `descriptor .+ form:$` @ `^^precession patch$`
          @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    precession patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    prepend
        : see same term @ `descriptor .+ form:$` @ `^^prependage patch$`
          @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    prependage patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    private
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
        : see same term @ `descriptor .+ form:$` @ `^^ Parental privatizer$`
          @ http://reluk.ca/project/Breccia/lexicon.brec
    privately
        : see same term @ `descriptor .+ form:$` @ `^^ Autoprivatizer$`
          @ http://reluk.ca/project/Breccia/lexicon.brec
    privatizer
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        , term ‘autoprivatizer’
            : join `^^autoprivatizer$`
        , term ‘parental privatizer’
            : join `^^parental privatizer$`
    production, term ‘image production set’
        : join `^^image production set$`
    proper package
        : see `^^proper package, of a project$` @ http://reluk.ca/project/lexicon.brec
    proper path
        : see @ http://reluk.ca/project/lexicon.brec
    publication, term ‘Web publication’
        : join `^^Web publication$`


╺━━ R ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    re
        : see `^^ referrer clause$` @ http://reluk.ca/project/Breccia/language_definition.brec
    recast
        : see @ http://reluk.ca/project/wayic/recast/lexicon.brec
    recast kit
        : see http://reluk.ca/project/wayic/recast/kit/
    refractory, Wayic Refractory
        : join `^^Wayic Refractory$`
    regular expression
        : see `^^ Pattern matching$` @ http://reluk.ca/project/Breccia/language_definition.brec
    replace
        : see same term @ `descriptor .+ form:$` @ `^^replacement patch$`
          @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    replacement patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    right
        , proto-cast of
            : see http://reluk.ca/project/proto-waycast/normative_ethic.xht#right
        , term
            : see `^^right$` @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    rightful
        : see @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    rights
        : see @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    right to F
        , proto-cast of
            : see http://reluk.ca/project/proto-waycast/normative_ethic.xht#right_to_F
        , term
            : see `^^right to F$` @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    right to G
        , proto-cast of
            : see http://reluk.ca/project/proto-waycast/normative_ethic.xht#right_to_G
        , term
            : see `^^right to G$` @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    run
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    runtime
        : see @ http://reluk.ca/project/Breccia/lexicon.brec


╺━━ S ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    see
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec
    see also
        : see `‘NB’.+‘(see)’.+ gap .+‘(also)’` @ `includes a referential command`
          @ `^^ imperative clause$` @ http://reluk.ca/project/Breccia/language_definition.brec
    set, term ‘image production set’
        : join `^^image production set$`
    sibling, of a body fractum
        : see @ `^^ hierarchical relata$` @ http://reluk.ca/project/Breccia/language_definition.brec
    sibling insertion patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    simulacra
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    simulacral
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    simulacrum
        : see `^^ Simulacrum$` @ http://reluk.ca/project/Breccia/language_definition.brec
    source
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    source code
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
    subjoin
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
            \ thence ‘subjoint’
    succeed
        : see same term @ `descriptor .+ form:$` @ `^^succession patch$`
          @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    succession patch
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    surjoin
        : see @ http://reluk.ca/project/Breccia/lexicon.brec
            \ thence ‘surjoint’


╺━━ T ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    task point
        : see `^^ fractal types$` @ http://reluk.ca/project/Breccia/language_definition.brec
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    thoroughfracta
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    thoroughfractal
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    thoroughfractum
        , keyword
            : see `^^ Thoroughfractum designator$`
              @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        , term
            : see `^^thoroughfractum$` @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    thoroughfractum designator
        : see `^^ Fractal types$` @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec


╺━━ V ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    viz.
        : see same term @ `includes a referential command` @ `^^ imperative clause$`
          @ http://reluk.ca/project/Breccia/language_definition.brec


╺━━ W ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    way, term ‘aimed way of life’
        : join `^^aimed way of life$`
    Waybrec
        , language
            : see http://reluk.ca/project/wayic/Waybrec/language_definition.brec
        , term
            : see `^^Waybrec$` @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
        , Web imager
            : join `^^, waycast$` @ `^^Web imager$`
    Waybreccian
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    Waybrec Mode for Emacs
        : see http://reluk.ca/project/wayic/Waybrec/Emacs/
    waycast
        , form of
            : see http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
        , project
            : see http://reluk.ca/project/wayic/cast/
        , term
            : see `^^waycast$` @ http://reluk.ca/project/wayic/cast/lexicon.brec
        , Web imager
            : join `^^, waycast$` @ `^^Web imager$`
    waycaster identifier
        : see `^^identifier of a waycaster$` @ http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
        : see `^^waycaster_identifier$` @ `^^certificate of authority$`
          @ http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
    way declaration
        : see @ http://reluk.ca/project/wayic/cast/lexicon.brec
    wayfracta
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    wayfractal
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    wayfractum
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    wayic
        , architectonic of
            : see http://reluk.ca/project/waycast/wayics/architectonic.brec
        , architecture of
            : see http://reluk.ca/project/waycast/wayics/architecture.brec
        , cast of
            : see http://reluk.ca/project/waycast/wayics/
        , projects of
            : see http://reluk.ca/project/wayic/
        , purpose of
            : see http://reluk.ca/project/waycast/wayics/purpose.brec
        , term
            : see `^^wayic$` @ http://reluk.ca/project/waycast/wayics/lexicon.brec
    wayical
        : see @ http://reluk.ca/project/waycast/wayics/lexicon.brec
    Wayic Code
        : see http://reluk.ca/project/wayic/code/
    Wayic Refractory
        : see http://reluk.ca/project/wayic/refractory/
    wayics
        : see @ http://reluk.ca/project/waycast/wayics/lexicon.brec
    way engagement
        : see @ http://reluk.ca/project/waycast/wayics/lexicon.brec
    way engagement point
        : see @ http://reluk.ca/project/wayic/Waybrec/language_definition.brec
    way model
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    way of life, aimed
        : join `^^aimed way of life$`
    waysource
        : see @ http://reluk.ca/project/wayic/Waybrec/lexicon.brec
    Web image
        : see http://reluk.ca/project/Web/lexicon.brec
    Web imager
        , Breccia
            : see http://reluk.ca/project/Breccia/Web/imager/
        , waycast
            : see http://reluk.ca/project/wayic/Web/imager/
    Web publication
        : see @ http://reluk.ca/project/Breccia/project_installation.brec
    whitespace
        : see @ http://reluk.ca/project/Breccia/language_definition.brec
    wrong
        , proto-cast of
            : see http://reluk.ca/project/proto-waycast/normative_ethic.xht#wrong
        , term
            : see `^^wrong$` @ http://reluk.ca/project/waycast/ethics/lexicon.brec
    wrongful
        : see @ http://reluk.ca/project/waycast/ethics/lexicon.brec



                                                    \ Copyright © 2019-2020  Michael Allan.  Licence MIT.
